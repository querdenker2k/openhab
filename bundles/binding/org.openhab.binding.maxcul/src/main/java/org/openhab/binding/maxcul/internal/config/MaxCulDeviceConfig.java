package org.openhab.binding.maxcul.internal.config;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.Properties;

import org.openhab.binding.maxcul.internal.MaxCulDevice;
import org.openhab.binding.maxcul.internal.MaxCulFeature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MaxCulDeviceConfig extends MaxCulItemConfig {
	private static final Logger logger = LoggerFactory.getLogger(MaxCulDeviceConfig.class);
	private final String CONFIG_PROPERTIES_BASE = "etc/maxcul";
	
	private MaxCulDevice device;
	private MaxCulFeature feature;
	private String serialNumber;
	private String address;
	
	public MaxCulDevice getDevice() {
		return device;
	}
	
	public void setDevice(MaxCulDevice device) {
		this.device = device;
	}
	
	public MaxCulFeature getFeature() {
		return feature;
	}
	
	public void setFeature(MaxCulFeature feature) {
		this.feature = feature;
	}

	public String getSerialNumber() {
		return serialNumber;
	}

	public void setSerialNumber(String serialNumber) {
		this.serialNumber = serialNumber;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}
	
	public boolean isPaired() {
		return this.address != null;
	}
	
	private String generateConfigFilename() {
		String base = CONFIG_PROPERTIES_BASE;
		String filename = String.format("%s/%s.properties", base,
				this.getSerialNumber());
		return filename;
	}

	/**
	 * Load the stored configuration information if it exists. This information
	 * is established during the pairing process.
	 */
	public void loadStoredConfig() {
		File cfgFile = new File(generateConfigFilename());

		if (cfgFile.exists()) {
			try {
				FileInputStream fiStream = new FileInputStream(cfgFile);
				Properties propertiesFile = new Properties();
				propertiesFile.load(fiStream);

				this.address = propertiesFile.getProperty("devAddr");

				fiStream.close();
			} catch (IOException e) {
				logger.warn("Unable to load information for "
						+ this.getDevice() + " " + this.getSerialNumber()
						+ " it may not yet be paired. Error was "
						+ e.getMessage());
				return;
			}
			logger.debug("Successfully loaded pairing info for "
					+ this.getSerialNumber());
		} else {
			logger.warn("Unable to locate information for "
					+ this.getDevice() + " " + this.getSerialNumber()
					+ " it may not yet be paired");
		}
	}

	/**
	 * Save the stored configuration information. Will update it if it already
	 * exists. The information is primarily established during the pairing
	 * process.
	 */
	public void saveStoredConfig() {
		if (this.isPaired()) {
			File cfgFile = new File(generateConfigFilename());
			File cfgDir = new File(CONFIG_PROPERTIES_BASE);

			if (!cfgFile.exists()) {
				try {
					if (!cfgDir.exists())
						cfgDir.mkdirs();
					cfgFile.createNewFile();
				} catch (IOException e) {
					logger.warn("Unable to create new properties file for "
							+ this.getDevice()
							+ " "
							+ this.getSerialNumber()
							+ ". Data won't be saved so pairing will be lost. Error was "
							+ e.getMessage());
					return;
				}
			}

			Properties propertiesFile = new Properties();
			propertiesFile.setProperty("devAddr", this.address);

			try {
				FileOutputStream foStream = new FileOutputStream(cfgFile);
				Date updateTime = new Date();
				propertiesFile.store(
						foStream,
						"Autogenerated by MaxCul binding on "
								+ updateTime.toString());
				foStream.close();
			} catch (IOException e) {
				logger.warn("Unable to load information for "
						+ this.getDevice() + " " + this.getSerialNumber()
						+ " it may not yet be paired. Error was "
						+ e.getMessage());
				return;
			}
			logger.debug("Successfully wrote pairing info for "
					+ this.getSerialNumber());
		} else
			logger.error("Tried saving configuration for "
					+ this.getSerialNumber() + " which is not paired.");
	}
}
